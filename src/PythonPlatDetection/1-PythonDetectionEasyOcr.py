# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IRrQSn-zas_jg98pYOv6y803WVk_CjpA
"""

#todo
    # read images openCv
    # blur and filter the edge 
    # detect countors (to detect the shape of the plat number)
    # crop the plat 
    # run easy ocr (optical caractere recognition)
    
#!pip install easyocr
#!pip install imutils

import cv2
import matplotlib.pyplot as plt
import numpy as np
import imutils
import easyocr

"""Read the image using opencv, grayScale it and Blur Unwanted Details"""

# read the image using opencv
img = cv2.imread("car.jpeg")

# we need to apply a gray filter in ordder to avoid dealing with colors
gray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)

# apply a blur to the whole image this helps us reduce the unwanted details
blfilter = cv2.bilateralFilter(gray, 13, 15, 15)

"""Reduce the noise"""

# reduce the noise to avoid dealing with extra details(anything than the plat)
edged = cv2.Canny(blfilter,30,200)

"""find Countors (find the plat rect)"""

# find all the contours (all shapes)
# the returned result will be a tree, and gonna be simply return contours 
# with 4 points
keypoints = cv2.findContours(edged.copy(),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

#grab all countours using imutils 
contours = imutils.grab_contours(keypoints)

# get the first 20 contours
contours = sorted(contours,key=cv2.contourArea,reverse=True)[:10]

# loop through the contours list and look for rect

location = None
for contour in contours:
  # reshape the looklike rect/counters, 10 specify how accurate the approximity is
  approx = cv2.approxPolyDP(contour,20,True)
  # check if the reshaped countor has 4 key points
  if len(approx)==4:
    location = approx
    break

"""Apply mask, crop the plat"""

location # the cordinate the plat number
# the keypoints related to this counter
# proved that they are the most accurate ones

# PS: approxPloyDb with 10 accurcy didnt work for me, i raise it up to 20

# we create a gray mask using numpy lib
mask = np.zeros(gray.shape,np.uint8)

 # now we can draw the contour that we found before in the image
new_image = cv2.drawContours(mask,[location],0,255,-1)

 # here we just crop the contour shape we found by comparing the image with mask
new_image = cv2.bitwise_and(img,img,mask=mask)

# now we can locate the image and crop only the detected contour whici is gonna
# be our plat
(x,y)  = np.where(mask==255) # get the x and y of the contour
(x1, y1) = (np.min(x), np.min(y))
(x2, y2) = (np.max(x), np.max(y))
cropped_image = gray[x1:x2+1, y1:y2+1]


plt.imshow(cropped_image)

"""read the plat using easyOCR"""

reader = easyocr.Reader(['en'])
result = reader.readtext(cropped_image)
result